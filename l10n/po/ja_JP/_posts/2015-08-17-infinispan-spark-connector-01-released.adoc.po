# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 23:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:12
#, no-wrap
msgid ""
"layout: blog\n"
"title: Infinispan Spark connector 0.1 released!\n"
"permalink: /blog/:year/:month/:day/infinispan-spark-connector-01-released\n"
"date: '2015-08-17T10:01:00.000-07:00'\n"
"author: gustavonalle\n"
"tags: [ \"release\",\n"
"\"spark\",\n"
"]\n"
"blogger_id: tag:blogger.com,1999:blog-5717179571414330874.post-352085214861141703\n"
"blogger_orig_url: https://blog.infinispan.org/2015/08/infinispan-spark-connector-01-released.html\n"
"---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:14
msgid "Dear users,"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:18
msgid "The Infinispan connector for Apache Spark has just been made available as a http://spark-packages.org/package/infinispan/infinispan-spark[Spark Package]!"
msgstr ""

#. type: Title ====
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:20
#, no-wrap
msgid "What is it?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:29
msgid "The Infinispan Spark connector allows tight integration with Apache Spark, allowing Spark jobs to be run against data stored in the Infinispan Server, exposing any cache as an RDD, and also writing data from any key/value RDD to a cache. It's also possible to create a DStream backed by cache events and to save any key-value DStream to a cache."
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:31
msgid "The minimum version required is Infinispan 8.0.0.Beta3."
msgstr ""

#. type: Title ====
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:33
#, no-wrap
msgid "Giving it a spin with Docker"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:40
msgid "A handy docker image that contains an Infinispan cluster co-located with an Apache Spark standalone cluster is the fastest way to try the connector. Start by launching the container that hosts the Spark Master:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:44
msgid "And then run as many worker nodes as you want:"
msgstr ""

#. type: Title ====
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:48
#, no-wrap
msgid "Using the shell"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:55
msgid "The Apache Spark shell is a convenient way to quickly run jobs in an interactive fashion. Taking advantage of the fact that Spark is already installed in the docker containers (and thus the shell), let's attach to the master:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:59
msgid "Once inside, a Spark shell can be launched by:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:65
msgid "That's all it's needed. The shell grabs the Infinispan connector and its dependencies from spark-packages.org and exposes them in the classpath."
msgstr ""

#. type: Title ====
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:67
#, no-wrap
msgid "Generating data and writing to Infinispan"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:72
msgid "Let's obtain a list of words from the Linux dictionary, and generate 1k random 4-word phrases. Paste the commands in the shell:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:76
msgid "From the phrases, we'll create a key value RDD (Long, String):"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:80
msgid "To save to Infinispan:"
msgstr ""

#. type: Title ====
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:85
#, no-wrap
msgid "Obtaining facts about data"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:90
msgid "To be able to explore data in the cache, the first step is to create an infinispan RDD:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:96
msgid "As an example job, let's calculate a histogram showing the distribution of word lengths in the phrases. This is simply a sequence of transformations expressed by:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:100
msgid "This pipeline yields:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:113
msgid "2 chars words: 10 occurrences 3 chars words: 37 occurrences 4 chars words: 133 occurrences 5 chars words: 219 occurrences 6 chars words: 373 occurrences 7 chars words: 428 occurrences 8 chars words: 510 occurrences 9 chars words: 508 occurrences 10 chars words: 471 occurrences 11 chars words: 380 occurrences 12 chars words: 309 occurrences 13 chars words: 238 occurrences"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:115
msgid "..."
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:120
msgid "Now let's find similar words using the https://en.wikipedia.org/wiki/Levenshtein_distance[Levenshtein distance algorithm]. For that we need to define a function that will calculate the edit distance between two strings. As usual, paste in the shell:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:127
msgid "Empowered by the Levenshtein distance implementation, we need another function that given a word, will find in the cache similar words according to the provided maximum edit distance:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:131
msgid "Sample usage:"
msgstr ""

#. type: Title ====
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:135
#, no-wrap
msgid "Where to go from here"
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:143
msgid "And that concludes this first post on Infinispan-Spark integration. Be sure to check the https://github.com/infinispan/infinispan-spark/tree/master/examples/twitter[Twitter demo] for non-shell usages of the connector, including Java and Scala API."
msgstr ""

#. type: Plain text
#: upstream/_posts/2015-08-17-infinispan-spark-connector-01-released.adoc:145
msgid "And it goes without saying, your feedback is much appreciated! :)"
msgstr ""
