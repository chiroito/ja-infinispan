# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 23:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:10
#, no-wrap
msgid ""
"layout: blog\n"
"title: 'Data Container Changes Part 3 '\n"
"permalink: /blog/:year/:month/:day/data-container-changes-part-3\n"
"date: '2018-02-07T23:00:00.000-08:00'\n"
"author: wburns\n"
"tags: [ \" off-heap\", \"eviction\", \"configuration\" ]\n"
"blogger_id: tag:blogger.com,1999:blog-5717179571414330874.post-402072241702515040\n"
"blogger_orig_url: https://blog.infinispan.org/2018/02/data-container-changes-part-3.html\n"
"---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:19
msgid "Just over a year ago we detailed some improvements to the data container, including the availability of Off Heap storage in http://blog.infinispan.org/2017/01/data-container-changes-part-2.html[part 2]. There have been quite a https://issues.jboss.org/browse/ISPN-8454?jql=project%20%3D%20ISPN%20AND%20resolution%20%3D%20Done%20AND%20component%20%3D%20%22Off%20Heap%22[few fixes] for Off Heap especially around memory size estimations with Infinispan 9.2. There is also a brand new \"eviction\" strategy that has a bit of a twist."
msgstr ""

#. type: Title ==
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:21
#, no-wrap
msgid "Eviction Strategy Resurrected"
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:29
msgid "Some of you may have remembered that Infinispan used to have an eviction strategy. This was originally used to decide what eviction algorithm was used, such as LRU or LIRS. This was removed when the new data container was introduced. Well... it is back again, but it will be used for a slightly different purpose."
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:32
msgid "The eviction strategy still has *NONE* & *MANUAL* which are exactly the same as before."
msgstr ""

#. type: Title ===
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:34
#, no-wrap
msgid "Remove strategy"
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:40
msgid "There is a new *REMOVE* strategy that is configured by default if eviction size is greater than 0. This strategy essentially enables eviction and removes old entries as new ones are inserted."
msgstr ""

#. type: Title ===
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:42
#, no-wrap
msgid "Exception strategy"
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:50
msgid "We have a brand new \"eviction\" strategy that provides new functionality.  It is unique in that it doesn't really evict, but rather prevent entries from being inserted.Â  This is the *EXCEPTION* strategy which blocks new entries from being inserted (or updated if they exceed memory size) by throwing a ContainerFullException when the size is reached."
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:56
msgid "This strategy only works on transactional caches that always have 2 phase commit enabled. This can be useful if you want to always have only so many entries and to give priority to currently inserted entries. This strategy has better performance than *REMOVE* since it doesn't have to bookkeep all entries to know what to remove as well."
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:61
msgid "Note this strategy works across all storage types: OBJECT, BINARY and OFFHEAP and works with both MEMORY and SIZE based \"eviction types. This makes it just as flexible as the *REMOVE* eviction strategy and hope it finds some uses by people."
msgstr ""

#. type: Title ===
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:63
#, no-wrap
msgid "How to Configure EXCEPTION Strategy"
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:68
msgid "This is how you can enable MEMORY based EXCEPTION \"eviction\" using xml configuration."
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:70
msgid "This is how you configure the same thing but programmatically."
msgstr ""

#. type: Title ==
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:73
#, no-wrap
msgid "Off Heap Memory Size Allocations & Estimations"
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:83
msgid "Before the off heap memory based eviction only counted the allocated memory chunks for the stored entries themselves. This unfortunately meant that the size estimate is a bit less than what it should have been. There are a few things that we improved since then, including reducing the overhead of our allocations. Note all of the below things require no configuration changes and users should just get the benefits."
msgstr ""

#. type: Title ===
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:85
#, no-wrap
msgid "Reduced per object overhead"
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:95
msgid "Prior the overhead for immutable entries with eviction, Infinispan itself use to allocate 2 chunks of memory with one being 28 bytes and adding 8 bytes to the actual object. Now we only allocate an additional 16 bytes to the object memory block itself (saving the extra allocation and requiring less on the object) when using eviction. Due to memory allocation overhead this saves much more than the 20 bytes as the allocator also has its own overhead."
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:100
msgid "We also shaved off 4 bytes off of all entries if expiration was not used, meaning overhead for an immutable cache entry without eviction only requires 21 bytes of overhead from ISPN when using off heap (retained in the same allocation block)."
msgstr ""

#. type: Title ===
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:102
#, no-wrap
msgid "Per allocation memory sizing estimations"
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:113
msgid "Internally ISPN allocates a new chunk of memory for each object. This is done currently to leverage the underlying OS allocator to handle features such as fragmentation or compaction (if the allocator does so).  Unfortunately this means that each object has its own overhead from the allocator. Thus we now take that into account when estimating the memory used by adding 8 bytes overhead and aligning to 16 bytes. This seems to be a pretty common way for allocators to work. If possible we could allow for tweaking these values, but they are hard coded currently."
msgstr ""

#. type: Title ===
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:115
#, no-wrap
msgid "Accounting for Address Count"
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:124
msgid "As was mentioned in the prior blog post about off heap, we allocate a single block of memory to hold address counters for our lookups when using Off Heap. Unfortunately we didn't account for that in the memory eviction count. We now account for that in the eviction mechanism, thus your memory eviction size must be greater than the address count rounded up to the nearest power of 2, multiplied by 8. What a mouthful..."
msgstr ""

#. type: Title ===
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:126
#, no-wrap
msgid "Wrap up"
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:133
msgid "Off heap has been overhauled quite a bit to try to reduce memory usage, fix bugs and more accurately estimate the memory used. We hope that along with the new eviction strategy are welcome additions to various applications."
msgstr ""

#. type: Plain text
#: upstream/_posts/2018-02-07-data-container-changes-part-3.adoc:137
msgid "Please make sure to contact us if you have any feedback, find any bugs or have any questions! You can get in contact with various places listed on our http://infinispan.org/community/[website]."
msgstr ""
