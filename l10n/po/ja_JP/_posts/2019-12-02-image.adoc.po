# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 23:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:8
#, no-wrap
msgid ""
"layout: blog\n"
"title: Infinispan's new image\n"
"permalink: /blog/:year/:month/:day/image\n"
"date: '2019-12-02T12:00:00.000-00:00'\n"
"author: remerson\n"
"tags: [ \"docker\" ]\n"
"---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:13
msgid "Infinispan 10 introduced a https://infinispan.org/blog/2019/11/11/serverng/[new server], which does not utilise the same launch commands and configuration as the legacy 9.4 wildfly based server. Therefore, we decided that this was an excellent opportunity to rewrite our container image from scratch to better suite the capabilities of the new server and to provide all the functionality required by the https://infinispan.org/blog/2019/11/25/infinispan-operator-1/[Infinispan Operator]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:16
msgid "This post focuses on the server image's architecture. Future blog posts will focus on more advanced configurations, as well as example usage and deployment scenarios such as deploying a cluster using Kubernetes StatefulSets."
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-12-02-image.adoc:17
#, no-wrap
msgid "Show me the code!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:21
msgid "The source code for the Infinispan image has a new home. The image can be found at https://github.com/infinispan/infinispan-images.  Currently this repository only contains the server image, however our intention is for this to also be the home for all future Infinispan related images."
msgstr ""

#. type: Title ===
#: upstream/_posts/2019-12-02-image.adoc:22
#, no-wrap
msgid "Where's the Dockerfile?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:28
msgid "The most noticable change when looking at the repository is that there is no `Dockerfile` in the source tree. This is because we decided to utilise the open-source tool https://cekit.io/[CEKit] to build our images. CEKit is an image creation tool that allows container images to be created using multiple build engines (e.g. docker, https://buildah.io/[Buildah], https://podman.io/[Podman])  with a single configuration. Installation instructions can be found https://docs.cekit.io/en/latest/handbook/installation/instructions.html[here], but the basic command to create a Docker based image is as follows."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-12-02-image.adoc:31
#, no-wrap
msgid "cekit build docker\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:36
msgid "CEKit leverages `.yaml` files for all configuration, opposed to a Dockerfile, as this allows for build time overriding of image properties. For example, with CEKit it's possible to override the server artifact version without modifying any files, instead the following is passed as a build parameter."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-12-02-image.adoc:39
#, no-wrap
msgid "cekit build --overrides '{\"artifacts\": [{\"name\": \"server.zip\", \"path\": \"infinispan-server-10.0.0-SNAPSHOT.zip\"}]}' docker\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:43
msgid "More detailed instructions about how to build the server image from source can be found in the https://github.com/infinispan/infinispan-images/tree/10.0.x#creating-images[image's documentation]."
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-12-02-image.adoc:44
#, no-wrap
msgid "Ok so where can I get a pre-built image?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:47
msgid "Previously the Infinispan images were deployed exclusively under the `jboss` namespace at https://hub.docker.com/r/jboss/infinispan-server/[jboss/infinispan-server], however this repository has now been deprecated and will be removed eventually."
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:50
msgid "Instead, all Infinispan images will now be released under the `infinispan` namespace and are hosted at both https://quay.io/infinispan/server[Quay.io] and https://hub.docker.com/r/infinispan/server[Docker Hub], as `quay.io/infinispan/server` and `infinispan/server`."
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-12-02-image.adoc:51
#, no-wrap
msgid "Getting Started"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:53
msgid "To get started with infinispan server on your local machine simply execute:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-12-02-image.adoc:56
#, no-wrap
msgid "docker run -p 11222:11222 infinispan/server\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:62
msgid "By default the image has authentication enabled on all exposed endpoints. When executing the above command the image automatically generates a username/password combo, prints the values to stdout and then starts the Infinispan server with the authenticated Hotrod and Rest endpoints exposed on port 11222. Therefore, it's necessary to utilise the printed credentials when attempting to access the exposed endpoints via clients."
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:64
msgid "It's also possible to provide a username/password combination via environment variables like so:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-12-02-image.adoc:67
#, no-wrap
msgid "docker run -p 11222:11222 -e USER=\"Titus Bramble\" -e PASS=\"Shambles\" infinispan/server\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2019-12-02-image.adoc:70
#, no-wrap
msgid "Connecting via Hotrod"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:74
msgid "Using the credentials passed in the command above, it is now possible to connect via the HotRod client using the following `hotrod-client.properties` file. Note, that the following SASL properties must be configured on your client, with the username and password properties changed as required, otherwise the connection will fail:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-12-02-image.adoc:80
#, no-wrap
msgid ""
"infinispan.remote.auth-realm=default\n"
"infinispan.remote.auth-server-name=infinispan\n"
"infinispan.remote.auth-username=Titus Bramble\n"
"infinispan.remote.auth-password=Shambles\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2019-12-02-image.adoc:82
#, no-wrap
msgid "Connecting via REST"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:85
msgid "The REST endpoint is configured to utilise the DIGEST protocol, therefore it's necessary for the HTTP client to authenticate requests. For example, the name of all caches can be retrieved via the following curl command:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-12-02-image.adoc:88
#, no-wrap
msgid " curl --digest -u \"Titus Bramble:Shambles\" http://localhost:11222/rest/v2/cache\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2019-12-02-image.adoc:91
#, no-wrap
msgid "Further Reading"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:94
msgid "For more detailed information abou how to use the image, please consult the https://github.com/infinispan/infinispan-images/blob/10.0.x/README.md[official documentation]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-12-02-image.adoc:96
msgid "In the next blog post we will look at how the server can be configured for more advanced use-cases by supplying configuration and identity `.yaml` files."
msgstr ""
