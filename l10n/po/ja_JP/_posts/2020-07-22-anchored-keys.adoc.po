# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 23:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:8
#, no-wrap
msgid ""
"layout: blog\n"
"title: Anchored keys - scaling up a cluster without transferring values\n"
"permalink: /blog/:year/:month/:day/anchored-keys\n"
"date: '2020-07-22T12:00:00.000-00:00'\n"
"author: dberindei\n"
"tags: [ \"anchored keys\", \"state transfer\" ]\n"
"---\n"
msgstr ""

#. type: Title =
#: upstream/_posts/2020-07-22-anchored-keys.adoc:10
#, no-wrap
msgid "Introducing the Anchored Keys module"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:13
msgid "Infinispan version 11 introduces an experimental module that allows scaling up a cluster and adding new nodes without expensive *state transfer*."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-07-22-anchored-keys.adoc:14
#, no-wrap
msgid "Background"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:20
msgid "For background, the preferred way to scale up the storage capacity of a Infinispan cluster is to use distributed caches.  A distributed cache stores each key/value pair on `num-owners` nodes, and each node can compute the location of a key (aka the key owners) directly."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:28
msgid "Infinispan achieves this by statically mapping cache keys to `num-segments` *consistent hash segments*, and then dynamically mapping segments to nodes based on the cache's *topology* (roughly the current plus the historical membership of the cache).  Whenever a new node joins the cluster, the cache is *rebalanced*, and the new node replaces an existing node as the owner of some segments.  The key/value pairs in those segments are copied to the new node and removed from the no-longer-owner node via *state transfer*."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:33
msgid "Because the allocation of segments to nodes is based on random UUIDs generated at start time, it is common (though less so after link:https://issues.redhat.com/browse/ISPN-11679[ISPN-11679] ), for segments to also move from one old node to another old node."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-07-22-anchored-keys.adoc:35
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:38
msgid "The basic idea is to skip the static mapping of keys to segments and to map keys directly to nodes."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:43
msgid "When a key/value pair is inserted into the cache, the newest member becomes the **anchor owner** of that key, and the only node storing the actual value.  In order to make the anchor location available without an extra remote lookup, all the other nodes store a reference to the anchor owner."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:46
msgid "That way, when another node joins, it only needs to receive the location information from the existing nodes, and values can stay on the anchor owner, minimizing the amount of traffic."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-07-22-anchored-keys.adoc:48
#, no-wrap
msgid "Limitations"
msgstr ""

#. type: Labeled list
#: upstream/_posts/2020-07-22-anchored-keys.adoc:50
#, no-wrap
msgid "Only one node can be added at a time"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:54
msgid "An external actor (e.g. a Kubernetes/OpenShift operator, or a human administrator)  must monitor the load on the current nodes, and add a new node whenever the newest node is close to \"full\"."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:57
msgid "Because the anchor owner information is replicated on all the nodes, and values are never moved off a node, the memory usage of each node will keep growing as new entries and nodes are added."
msgstr ""

#. type: Labeled list
#: upstream/_posts/2020-07-22-anchored-keys.adoc:58
#, no-wrap
msgid "There is no redundancy"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:61
msgid "Every value is stored on a single node.  When a node crashes or even stops gracefully, the values stored on that node are lost."
msgstr ""

#. type: Labeled list
#: upstream/_posts/2020-07-22-anchored-keys.adoc:62
#, no-wrap
msgid "Transactions are not supported"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:65
msgid "A later version may add transaction support, but the fact that any node stop or crash loses entries makes transactions a lot less valuable compared to a distributed cache."
msgstr ""

#. type: Labeled list
#: upstream/_posts/2020-07-22-anchored-keys.adoc:66
#, no-wrap
msgid "Hot Rod clients do not know the anchor owner"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:70
msgid "Hot Rod clients cannot use the topology information from the servers to locate the anchor owner.  Instead, the server receiving a Hot Rod get request must make an additional request to the anchor owner in order to retrieve the value."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-07-22-anchored-keys.adoc:72
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:75
msgid "The module is still very young and does not yet support many Infinispan features."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:78
msgid "Eventually, if it proves useful, it may become another cache mode, just like scattered caches.  For now, configuring a cache with anchored keys requires a replicated cache with a custom element `anchored-keys`:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-07-22-anchored-keys.adoc:90
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<infinispan\n"
"      xmlns=\"urn:infinispan:config:11.0\"\n"
"      xmlns:anchored=\"urn:infinispan:config:anchored:11.0\"\n"
"      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"      xsi:schemaLocation=\"urn:infinispan:config:11.0\n"
"            https://infinispan.org/schemas/infinispan-config-11.0.xsd\n"
"            urn:infinispan:config:anchored:11.0\n"
"            https://infinispan.org/schemas/infinispan-anchored-config-11.0.xsd\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-07-22-anchored-keys.adoc:97
#, no-wrap
msgid ""
"    <cache-container default-cache=\"default\">\n"
"        <transport/>\n"
"        <replicated-cache name=\"default\">\n"
"            <anchored:anchored-keys/>\n"
"        </replicated-cache>\n"
"    </cache-container>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-07-22-anchored-keys.adoc:99
#, no-wrap
msgid "</infinispan>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:103
msgid "When the `<anchored-keys/>` element is present, the module automatically enables anchored keys and makes some required configuration changes:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:105
msgid "Disables `await-initial-transfer`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:106
msgid "Enables conflict resolution with the equivalent of"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:108
msgid "`<partition-handling when-split=\"ALLOW_READ_WRITES\" merge-policy=\"PREFER_NON_NULL\"/>`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:111
msgid "The cache will fail to start if these attributes are explicitly set to other values, if state transfer is disabled, or if transactions are enabled."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-07-22-anchored-keys.adoc:113
#, no-wrap
msgid "Implementation status"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:116
msgid "Basic operations are implemented: `put`, `putIfAbsent`, `get`, `replace`, `remove`, `putAll`, `getAll`."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-07-22-anchored-keys.adoc:118
#, no-wrap
msgid "Functional commands"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:120
msgid "The `FunctionalMap` API is not implemented."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:123
msgid "Other operations that rely on the functional API's implementation do not work either: `merge`, `compute`, `computeIfPresent`, `computeIfAbsent`."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-07-22-anchored-keys.adoc:124
#, no-wrap
msgid "Partition handling"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:128
msgid "When a node crashes, surviving nodes do not remove anchor references pointing to that node.  In theory, this could allow merges to skip conflict resolution, but currently the `PREFERRED_NON_NULL` merge policy is configured automatically and cannot be changed."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-07-22-anchored-keys.adoc:129
#, no-wrap
msgid "Listeners"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:131
msgid "Cluster listeners and client listeners are implemented and receive the correct notifications."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:134
msgid "Non-clustered embedded listeners currently receive notifications on all the nodes, not just the node where the value is stored."
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-07-22-anchored-keys.adoc:136
#, no-wrap
msgid "Performance considerations"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-07-22-anchored-keys.adoc:138
#, no-wrap
msgid "Client/Server Latency"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:141
msgid "The client always contacts the primary owner, so any read has a `(N-1)/N` probability of requiring a unicast RPC from the primary to the anchor owner."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:144
msgid "Writes require the primary to send the value to one node and the anchor address to all the other nodes, which is currently done with `N-1` unicast RPCs."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:148
msgid "In theory we could send in parallel one unicast RPC for the value and one multicast RPC for the address, but that would need additional logic to ignore the address on the anchor owner and with TCP multicast RPCs are implemented as parallel unicasts anyway."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-07-22-anchored-keys.adoc:150
#, no-wrap
msgid "Memory overhead"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:153
msgid "Compared to a distributed cache with one owner, an anchored-keys cache contains copies of all the keys and their locations, plus the overhead of the cache itself."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:156
msgid "Therefore, a node with anchored-keys caches should stop accepting new entries when it has less than `(<key size> + <per-key overhead>) * <number of entries not yet inserted>` bytes available."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:160
msgid "The number of entries not yet inserted is obviously very hard to estimate.  In the future we may provide a way to limit the overhead of key location information, e.g. by using a distributed cache."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:165
msgid "The per-key overhead is lowest for off-heap storage, around 63 bytes: 8 bytes for the entry reference in `MemoryAddressHash.memory`, 29 bytes for the off-heap entry header, and 26 bytes for the serialized `RemoteMetadata` with the owner's address."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:170
msgid "The per-key overhead of the ConcurrentHashMap-based on-heap cache, assuming a 64-bit JVM with compressed OOPS, would be around 92 bytes: 32 bytes for `ConcurrentHashMap.Node`, 32 bytes for `MetadataImmortalCacheEntry`, 24 bytes for `RemoteMetadata`, and 4 bytes in the `ConcurrentHashMap.table` array."
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-07-22-anchored-keys.adoc:172
#, no-wrap
msgid "State transfer"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:175
msgid "State transfer does not transfer the actual values, but it still needs to transfer all the keys and the anchor owner information."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:180
msgid "Assuming that the values are much bigger compared to the keys, the anchor cache's state transfer should also be much faster compared to the state transfer of a distributed cache of a similar size.  But for small values, there may not be a visible improvement."
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-07-22-anchored-keys.adoc:185
msgid "The initial state transfer does not block a joiner from starting, because it will just ask another node for the anchor owner.  However, the remote lookups can be expensive, especially in embedded mode, but also in server mode, if the client is not `HASH_DISTRIBUTION_AWARE`."
msgstr ""
