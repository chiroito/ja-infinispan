# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 23:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:18
#, no-wrap
msgid ""
"layout: blog\n"
"title: Composing the Infinispan Docker image\n"
"permalink: /blog/:year/:month/:day/composing-infinispan-docker-image\n"
"date: '2016-12-05T03:42:00.000-08:00'\n"
"author: gustavonalle\n"
"tags: [ \"compose\",\n"
"\"jdbc\",\n"
"\"docker\",\n"
"\"persistence\",\n"
"\"server\",\n"
"\"modules\",\n"
"\"oracle\",\n"
"\"cache store\",\n"
"]\n"
"blogger_id: tag:blogger.com,1999:blog-5717179571414330874.post-4984211490250460785\n"
"blogger_orig_url: https://blog.infinispan.org/2016/12/composing-infinispan-docker-image.html\n"
"---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:24
msgid "In the http://blog.infinispan.org/2016/10/infinispan-docker-image-custom.html[previous] post we showed how to manipulate the Infinispan Docker container configuration at both runtime and boot time."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:28
msgid "Before diving into multi-host Docker usage, in this post we'll explore how to create multi-container Docker applications involving Infinispan with the help of https://docs.docker.com/compose/[Docker Compose]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:31
msgid "For this we'll look at a typical scenario of an Infinispan server backed by an Oracle database as a cache store."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:34
msgid "All the code for this sample can be found on https://github.com/gustavonalle/infinispan-docker-compose[github]."
msgstr ""

#. type: Title ===
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:36
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:40
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:170
#, no-wrap
msgid " "
msgstr ""

#. type: Title ===
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:38
#, no-wrap
msgid "Infinispan with Oracle JDBC cache store"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:47
msgid "In order to have a cache with persistence with Oracle, we need to do some configuration: configure the driver in the server, create the data source associated with the driver, and configure the cache itself with JDBC persistence."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:50
msgid "Let's take a look at each of those steps:"
msgstr ""

#. type: Title =====
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:51
#, no-wrap
msgid "Obtaining and configuring the driver"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:56
msgid "The driver (ojdbc6.jar) should be http://www.oracle.com/technetwork/apps-tech/jdbc-112010-090769.html[downloaded] and placed in the 'driver' folder of the sample project."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:59
msgid "The module.xml declaration used to make it available on the server is as follows:"
msgstr ""

#. type: Title =====
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:63
#, no-wrap
msgid "Configuring the Data source"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:67
msgid "The data source is configured in the \"datasource\" element of the server configuration file as shown below:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:72
msgid "and inside the \"datasource/drivers\" element, we need to declare the driver:"
msgstr ""

#. type: Title =====
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:76
#, no-wrap
msgid "Creating the cache"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:79
msgid "The last piece is to define a cache with the proper JDBC Store:"
msgstr ""

#. type: Title =====
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:83
#, no-wrap
msgid "Putting all together"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:90
msgid "From now on, without using Docker we'd be ready to download and install Oracle following the specific instructions for your OS, then download the Infinispan Server, edit the configuration files, copy over the driver jar, figure out how to launch the database and server, taking care not to have any port conflicts."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:94
msgid "If it sounds too much work, it's because it really is. Wouldn't it be nice to have all these wired together and launched with a simple command line? Let's take a look at the Docker way next. "
msgstr ""

#. type: Title ===
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:95
#, no-wrap
msgid "Enter Docker Compose"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:100
msgid "Docker Compose is a tool part of the Docker stack to facilitate configuration, execution and management of related Docker containers."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:105
msgid "By describing the application aspects in a single yaml file, it allows centralized control of the containers, including custom configuration and parameters, and it also allows runtime interactions with each of the exposed services."
msgstr ""

#. type: Title =====
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:107
#, no-wrap
msgid "Composing Infinispan"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:110
msgid "Our Docker Compose file to assemble the application is given below:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:113
msgid "It contains two services:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:117
msgid "one called *_oracle_* that uses the https://hub.docker.com/r/wnameless/oracle-xe-11g/[wnameless/oracle-xe-11g] Docker image, with an environment variable to allow remote connections."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:124
msgid " another one called _*infinispan*_ that uses version 8.2.5.Final of the https://store.docker.com/community/images/jboss/infinispan-server[Infinispan Server image]. It is launched with a custom command pointing to the changed configuration file and it also mounts two volumes in the container: one for the driver and its module.xml and another for the folder holding our server xml configuration."
msgstr ""

#. type: Title =====
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:125
#, no-wrap
msgid "Launching"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:128
msgid "To start the application, just execute"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:132
msgid "To inspect the status of the containers:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:136
msgid "To follow the Infinispan server logs, use:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:144
msgid "Infinispan usually starts faster than the database, and since the server waits until the database is ready (more on that later), keep an eye in the log output for \"Infinispan Server 8.2.5.Final (WildFly Core 2.0.10.Final) started\". After that, both Infinispan and Oracle are properly initialized."
msgstr ""

#. type: Title =====
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:145
#, no-wrap
msgid "Testing it"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:149
msgid "Let's insert a value using the Rest endpoint from Infinispan and verify it was saved to the Oracle database:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:154
msgid "To check the Oracle database, we can attach to the container and use Sqlplus:"
msgstr ""

#. type: Title =====
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:158
#, no-wrap
msgid "Other operations"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:163
msgid "It's also possible to increase and decrease the number of containers for each of the services:"
msgstr ""

#. type: Title ===
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:168
#, no-wrap
msgid "A thing or two about startup order"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:176
msgid "When dealing with dependent containers in Docker based environments, it's highly recommended to make the connection obtention between parties robust enough so that the fact that one dependency is not totally initialized doesn't cause the whole application to fail when starting."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:181
msgid "Although Compose does have a *_depends_on_* instruction, it simply starts the containers in the declared order but it has no means to detected when a certain container is fully initialized and ready to serve requests before launching a dependent one."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:186
msgid "One may be tempted to simply write some glue script to detect if a certain port is open, but that does not work in practice: the network socket may be opened, but the background service could still be in transient initialization state."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:191
msgid "The recommended solution for this it to make whoever depends on a service to retry periodically until the dependency is ready. On the Infinispan + Oracle case, we specifically configured the data source with retries to avoid failing at once if the database is not ready:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:196
msgid "When starting the application via Compose you'll notice that Infinispan print some WARN with connection exceptions until Oracle is available: don't panic, this is expected!"
msgstr ""

#. type: Title ===
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:199
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:209
msgid "Docker Compose is a powerful and easy to use tool to launch applications involving multiple containers: in this post it allowed to start Infinispan plus Oracle with custom configurations with a single command.  It's also a handy tool to have during development and testing phase of a project, specially when using/evaluating Infinispan with its many possible integrations."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-05-composing-infinispan-docker-image.adoc:216
msgid "Be sure to check other examples of using Docker Compose involving Infinispan: the https://github.com/infinispan/infinispan-spark/tree/master/examples/twitter[Infinispan+Spark Twitter demo], and the https://github.com/infinispan/infinispan-hadoop/tree/master/samples/flink[Infinispan+Apache Flink] demo."
msgstr ""
