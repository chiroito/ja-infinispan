# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 23:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:20
#, no-wrap
msgid ""
"layout: blog\n"
"title: Meet Ickle!\n"
"permalink: /blog/:year/:month/:day/meet-ickle\n"
"date: '2016-12-08T04:50:00.000-08:00'\n"
"author: anistor\n"
"tags: [\n"
"\"JP-QL\",\n"
"\"Hibernate-Search\",\n"
"\"jpa\",\n"
"\"lucene\",\n"
"\"full-text\",\n"
"\"indexing\",\n"
"\"language\",\n"
"\"query\",\n"
"\"DSL\",\n"
"]\n"
"blogger_id: tag:blogger.com,1999:blog-5717179571414330874.post-6924153057805410893\n"
"blogger_orig_url: https://blog.infinispan.org/2016/12/meet-ickle.html\n"
"---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:26
msgid "As you’ve already learned from an earlier post this week, Infinispan 9 is on its final approach to landing and is bringing a new query language. Hurray! But wait, was there something wrong with the old one(s)? Not wrong really ...  I’ll explain."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:35
msgid "Infinispan is a data grid of several query languages. Historically, it has offered search support early in its existence by integrating with Hibernate Search which provides a powerful Java-based DSL enabling you to build Lucene queries and run them on top of your Java domain model living in the data grid. Usage of this integration is confined to embedded mode, but that still succeeds in making Java users happy."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:41
msgid "While the Hibernate Search combination is neat and very appealing to Java users it completely leaves non-JVM languages accessing Infinispan via remote protocols out in the cold."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:53
msgid "Enter Remote Query. Infinispan 6.0 starts to address the need of searching the grid remotely via Hot Rod. The internals are still built on top of Lucene and Hibernate Search bedrock but these technologies are now hidden behind a new query API, the https://docs.jboss.org/infinispan/9.0/apidocs/org/infinispan/query/dsl/QueryBuilder.html[QueryBuilder], an internal DSL resembling JPA criteria query. The QueryBuilder has implementations for both embedded mode and Hot Rod. This new API provides all relational operators you can think of, but no full-text search initially, we planned to add that later."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:64
msgid "Creating a new internal DSL was fun. However, having a long term strategy for evolving it while keeping complete backward compatibility and also doing so uniformly across implementations in multiple languages proved to be a difficult challenge. So while we were contemplating adding new full-text operators to this DSL we decided on making a long leap forward and adopt a more flexible alternative by having our own string based query language instead, another DSL really, albeit an external one this time."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:69
msgid "So after the long ado, let me introduce Ickle, Infinispan’s new query language, conspicuously resembling JP-QL."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:73
msgid "Ickle:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:75
msgid "is a light and small subset of JP-QL, hence the lovely name"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:76
msgid "queries Java classes and supports Protocol Buffers too"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:77
msgid "queries can target a *single* entity type"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:79
msgid "queries can filter on properties of embedded objects too, including collections"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:80
msgid "supports projections, aggregations, sorting, named parameters"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:81
msgid "supports indexed and non-indexed execution"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:82
msgid "supports complex boolean expressions"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:84
msgid "does not support computations in expressions (eg. `user.age > sqrt(user.shoeSize + 3)` is not allowed but `user.age >= 18` is fine)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:85
msgid "does not support joins"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:87
msgid "but, navigations along embedded entities are implicit joins and are allowed"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:88
msgid "joining on embedded collections is allowed"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:89
msgid "other join types not supported"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:90
msgid "subqueries are not supported"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:92
msgid "besides the normal relational operators it offers full-text operators, similar to Lucene’s  query parser"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:95
msgid "is now supported across various Infinispan APIs, wherever a Query produced by the QueryBuilder is accepted (even for continuous queries or in event filters for listeners!)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:101
msgid "That is to say we squeezed JP-QL to the bare minimum and added full-text predicates that closely follow the syntax of https://lucene.apache.org/core/6_2_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package.description[Lucene’s query parser]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:106
msgid "If you are familiar with JPA/JP-QL then the following example will speak for itself:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2016-12-08-meet-ickle.adoc:115
#, no-wrap
msgid ""
"select accountId, sum(amount) from com.acme.Transaction\n"
"    where amount < 20.0\n"
"    group by accountId\n"
"    having sum(amount) > 1000.0\n"
"    order by accountId\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:118
msgid "The same query can be written using the QueryBuilder:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2016-12-08-meet-ickle.adoc:127
#, no-wrap
msgid ""
"Query query = queryFactory.from(Transaction.class)\n"
".select(Expression.property(\"accountId\"), Expression.sum(\"amount\"))\n"
".having(\"amount\").lt(20.0)\n"
".groupBy(\"accountId\")\n"
".having(Expression.sum(\"amount\")).gt(1000.0)\n"
".orderBy(\"accountId\").build();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:132
msgid "Both examples look nice but I hope you will agree the first one is better."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:137
msgid "Ickle supports several new predicates for full-text matching that the QueryBuilder is missing. These predicates use the : operator that you are probably familiar from Lucene’s own query language.  This example demonstrates a simple full-text term query:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2016-12-08-meet-ickle.adoc:143
#, no-wrap
msgid ""
"select transactionId, amount, description from com.acme.Transaction\n"
"where amount > 10 and description : \"coffee\"\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:148
msgid "As you can see, relational predicates and full-text predicates can be combined with boolean operators at will."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:158
msgid "The only important thing to remark here is relational predicates are applicable to non-analyzed fields while full-text predicates can be applied to analyzed field only. How does indexing work, what is analysis and how do I turn it on/off for my fields? That’s the topic of a future post, so please be patient or start readinghttps://docs.jboss.org/hibernate/search/5.6/reference/en-US/html_single/#_analysis[ here]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:162
msgid "Besides term queries we support several more:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:164
msgid "Term                     `description : \"coffee\"`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:165
msgid "Fuzzy                    `description : \"cofee\"~2`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:166
msgid "Range                    `amount : [40 to 90}``"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:167
msgid "Phrase                   `description : \"hello world\"`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:168
msgid "Proximity                `description : \"canceling fee\"~3`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:169
msgid "Wildcard                 `description : \"te?t\"`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:170
msgid "Regexp                  `description : /[mb]oat/`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:171
msgid "Boosting                 `description : \"beer\"^3 and description :\"books\"`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:174
msgid "You can read all about them starting from https://lucene.apache.org/core/6_2_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package.description[here]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:190
msgid "But is Ickle really new? Not really. The name is new, the full-text features are new, but a JP-QL-ish query string was always internally present in the Query objects produced by the QueryBuilder since the beginning of Remote Query. That language was never exposed and specified until now. It evolved significantly over time and now it is ready for you to use it. The QueryBuilder / criteria-like API is still there as a convenience but it might go out of favor over time. It will be limited to non-full-text functionality only. As Ickle grows we’ll probably not be able to include some of the additions in the QueryBuilder in a backward compatible manner. If growing will cause too much pain we might consider deprecating it in favor of Ickle or if there is serious demand for it we might continue to evolve the QueryBuilder in a non compatible manner."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:205
msgid "Being a string based query language, Ickle is very convenient for our REST endpoint, the CLI, and the administration console allowing you to quickly inspect the contents of the grid. You’ll be able to use it there pretty soon. We’ll also continue to expand Ickle with more advanced full-text features like spatial queries and faceting, but that’s a subject for another major version. Until then, why not grab the current 9.0 Beta1 and test drive the new query language yourself? We’d love to hear your feedback on the https://developer.jboss.org/en/infinispan/content[ forum], on our https://issues.jboss.org/projects/ISPN[ issue tracker] or on IRC on the #infinispan channel on http://webchat.freenode.net/?channels=%23infinispan[ Freenode]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2016-12-08-meet-ickle.adoc:209
msgid "Happy coding!"
msgstr ""
