# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 23:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:10
#, no-wrap
msgid ""
"layout: blog\n"
"title: First steps with Vert.x and Infinispan REST API (Part 1)\n"
"permalink: /blog/:year/:month/:day/first-steps-with-vertx-and-infinispan-rest-api\n"
"date: '2017-12-12T08:04:00.000-08:00'\n"
"author: karesti\n"
"tags: [ \"vert.x\", \"rest\", \"API\" ]\n"
"blogger_id: tag:blogger.com,1999:blog-5717179571414330874.post-7661926351614603116\n"
"blogger_orig_url: https://blog.infinispan.org/2017/12/first-steps-with-vertx-and-infinispan-rest-api.html\n"
"---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:15
msgid "Welcome to the first in a multi-part series of blog posts about creating http://vertx.io/[Eclipse Vert.x] applications with http://infinispan.org/[Infinispan]. The purpose of this first tutorial is to showcase how to create a REST API."
msgstr ""

#. type: delimited block _
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:21
msgid "_All the code of this tutorial is available in this https://github.com/infinispan-demos/vertx-api[GitHub repository]. The backend is a Java project using https://maven.apache.org/[Maven], so all the needed dependencies can be found in the pom.xml._"
msgstr ""

#. type: Title ==
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:25
#, no-wrap
msgid "What is Vert.x ?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:35
msgid "http://vertx.io/[Vert.x] is a tool-kit for building reactive applications on the JVM. It’s an event driven and non blocking tool-kit.  It is based on the http://vertx.io/docs/vertx-core/java/#_reactor_and_multi_reactor[Reactor Pattern], like Node.js, but unlike Node it can easily use all the cores of your machine so you can create highly concurrent and performant applications. Code examples can be found https://github.com/vert-x3/vertx-examples[in this repository]."
msgstr ""

#. type: Title ==
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:40
#, no-wrap
msgid "REST API"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:52
msgid "Let’s start creating a simple endpoint that will display a welcome message on '/'. In Vert.x this is done by creating a *http://vertx.io/docs/vertx-core/java/#_verticles[Verticle]*. A verticle is a unit of deployment and processes incoming events over an event-loop. https://en.wikipedia.org/wiki/Event_loop[Event-loops] are used in asynchronous programming models. I won't spend more time here explaining these concepts as this is very well done in this https://www.youtube.com/watch?v=qL5BGHPXrac[Devoxx Vert.x talk] or in the documentation available http://vertx.io/docs/guide-for-java-devs/[here]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:55
msgid "We need to override the start method, create a 'router' so '/' requests can be handled, and finally create a http server."
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:61
msgid "The most important thing to remember about vert.x, is that *we can NEVER EVER call blocking code* (we will see how to deal with blocking API's just after). If we do so, we will http://vertx.io/docs/vertx-core/java/#golden_rule[block the event loop] and we won't be able to serve incoming requests properly."
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:67
msgid "Run the main method, go to your browser to http://localhost:8081/ and we see the welcome message !"
msgstr ""

#. type: Title ===
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:69
#, no-wrap
msgid "Connecting with Infinispan"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:82
msgid "Now we are going to create a *REST API* that uses Infinispan. The purpose here is to post and get names by id. We are going to use the default cache in Infinispan for this example, and we will connect to it remotely. To do that, we are going to use the http://infinispan.org/hotrod-clients/[Infinispan hotrod protocol], which is the recommended way to do it (but we could use http://infinispan.org/docs/9.0.x/infinispan_server_guide/infinispan_server_guide.html#_rest[REST] or http://infinispan.org/docs/9.0.x/infinispan_server_guide/infinispan_server_guide.html#_memcached[Memcached] protocol too)"
msgstr ""

#. type: Title ====
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:84
#, no-wrap
msgid "Start Infinispan locally"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:90
msgid "The first thing we are going to do is to run an Infinispan Server locally. We download the Infinispan Server from http://downloads.jboss.org/infinispan/9.1.3.Final/infinispan-server-9.1.3.Final-bin.zip[here], unzip the downloaded file and run ./bin/standalone.sh. "
msgstr ""

#. type: delimited block _
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:100
msgid "_If you are using Docker on Linux, you can use the Ihttps://hub.docker.com/r/jboss/infinispan-server/[nfinispan Docker Image Available] easily. If you are using Docker for Mac, at the time of this writing there is an issue with internal IP addresses and they can't be called externally. Different workarounds exist to solve the problem, but the easiest thing for this example is simply downloading and running the standalone server locally. We will see how to use the docker image in Openshift just after._"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:103
msgid "The hotrod server is listening in localhost:11222."
msgstr ""

#. type: Title ====
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:104
#, no-wrap
msgid "Connect the client to the server"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:108
msgid "The code we need to connect with Infinispan from our java application is the following :"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:122
msgid "This code *is blocking*. As I said before, *we can't block the event loop* and this will happen if we directly call these API's from a verticle. The code must be called using http://vertx.io/docs/vertx-core/java/#blocking_code[vertx.executeBlocking] method, and passing a Handler. The code in the handler will be executed from a worker thread pool and will pass the result back asynchronously.  Instead of overriding the start method, we are going to override start(Future<Void> startFuture). This way, we are going to be able to handle errors."
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:125
msgid "To stop the client, the API supplies a non blocking method that can be called when the verticle is stopped, so we are safe on that."
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:130
msgid "We are going to create an abstract CacheAccessVerticle where we will initialise the manager and get default cache. When everything is correct and the defautCache variable is initialised, we will log a message and execute the initSuccess abstract method."
msgstr ""

#. type: Title ===
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:134
#, no-wrap
msgid "REST API to create names"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:138
msgid "We are going to add 3 new endpoints."
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:140
msgid "GET /api displays the API name"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:141
msgid "POST /api/cutenames creates a new name"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:142
msgid "GET /api/cutenames/id displays a name by id"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:145
msgid "CuteNamesRestAPI verticle can now extend this class and override the initSuccess method instead of the start method."
msgstr ""

#. type: Title ====
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:150
#, no-wrap
msgid "POST"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:153
msgid "Our goal is to use a curl to create a name like this :"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:158
msgid "curl -X POST \\  -H \"Content-Type: application/json\" \\ -d '\\{\"name\":\"Oihana\"}' \"http://localhost:8081/api/cutenames\""
msgstr ""

#. type: delimited block _
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:166
msgid "_For those that are not familiar with basques names, Oihana means 'rainforest' and is a super cute name. Those who know me will confirm that I'm absolutely not biased making this statement._"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:171
msgid "To read the body content, we need to *add a body handler* to the route, otherwise the body won't be parsed. This is done by calling router.route().handler(BodyHandler.create())."
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:175
msgid "The handler that will handle the post method in '/api/cutenames' is a RoutingContext handler. We want to create a new name in the default cache. For that, we will call putAsync method from the *defaultCache*."
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:182
msgid "The server responds 201 when the name is correctly created, and 400 when the request is not correct."
msgstr ""

#. type: Title ====
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:184
#, no-wrap
msgid "GET by id"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:189
msgid "To create a get endpoint by id, we need to declare a route that will take a parameter :id. In the route handler, we are going to call getAsync method."
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:194
msgid "If we run the main, we can POST and GET names using curl !"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:198
msgid " curl -X POST -H \"Content-Type: application/json\" \\  -d '\\{\"id\":\"42\", \"name\":\"Oihana\"}' \\  \"http://localhost:8081/api/cutenames\" "
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:200
#, no-wrap
msgid "*Cute name added *\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:205
msgid " curl -X GET -H \"Content-Type: application/json\" \\  \"http://localhost:8081/api/cutenames/42\" * \\{\"name\":\"Oihana\"}*"
msgstr ""

#. type: Title ==
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:209
#, no-wrap
msgid "Wrap up"
msgstr ""

#. type: Plain text
#: upstream/_posts/2017-12-12-first-steps-with-vertx-and-infinispan-rest-api.adoc:219
msgid "We have learned how to create a REST API with Vert.x, powered by Infinispan. The repository has some unit tests using the http://vertx.io/docs/vertx-web-client/java/[web client]. Feedback is more than welcome to improve the code and the provided examples. I hope you enjoyed this tutorial ! On the next tutorial you will learn how to create a http://blog.infinispan.org/2017/12/first-steps-with-vertx-and-infinispan-push-api.html[PUSH API]."
msgstr ""
