# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 23:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:14
#, no-wrap
msgid ""
"layout: blog\n"
"title: Infinispan 4.0.0.Final has landed!\n"
"permalink: /blog/:year/:month/:day/infinispan-400final-has-landed\n"
"date: '2010-02-23T08:14:00.000-08:00'\n"
"author: msurtani\n"
"tags: [ \"release\",\n"
"\"benchmarks\",\n"
"\"final\",\n"
"]\n"
"thumbnail: http://4.bp.blogspot.com/_ca0W9t-Ryos/S36xS3U0-cI/AAAAAAAAA-o/A6-mKgMgegc/s72-c/infinispan_logoupdate_256px.png\n"
"blogger_id: tag:blogger.com,1999:blog-5717179571414330874.post-1271458764451531837\n"
"blogger_orig_url: https://blog.infinispan.org/2010/02/infinispan-400final-has-landed.html\n"
"---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:23
msgid "http://4.bp.blogspot.com/_ca0W9t-Ryos/S36xS3U0-cI/AAAAAAAAA-o/A6-mKgMgegc/s1600-h/infinispan_logoupdate_256px.png[image:http://4.bp.blogspot.com/_ca0W9t-Ryos/S36xS3U0-cI/AAAAAAAAA-o/A6-mKgMgegc/s400/infinispan_logoupdate_256px.png[image]]It is with great pleasure that I'd like to announce the availability of the final release of http://www.infinispan.org/[Infinispan] 4.0.0.  Infinispan is an open source, Java-based data grid platform that I first http://infinispan.blogspot.com/2009/04/infinispan-start-of-new-era-in-open.html[announced] last April, and since then the codebase has been through a series of alpha and beta releases, and most recently 4 release candidates which generated a lot of community feedback."
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:29
msgid "It has been a long and wild ride, and the very active community has been critical to this release. A big thank you to everyone involved, you all know who you are."
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:33
#, no-wrap
msgid "*Benchmarks*\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:45
msgid "I http://infinispan.blogspot.com/2010/02/infinispan-as-local-cache.html[recently published] an article about running Infinispan in local mode - as a standalone cache - compared to http://www.jboss.org/jbosscache/[JBoss Cache] and http://ehcache.sourceforge.net/[EHCache]. The article took readers through the ease of configuration and the simple API, and then demonstrated some performance benchmarks using the recently-announced http://infinispan.blogspot.com/2010/02/benchmarking-infinispan-and-other-data.html[Cache Benchmarking Framework]. We've been making further use of this benchmarking framework in the recent weeks and months, extensively testing Infinispan on a large cluster."
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:53
msgid "Here are some simple charts, generated using the framework. The first set compare Infinispan against the latest and greatest JBoss Cache release (3.2.2.GA at this time), using both synchronous and asynchronous replication. But first, a little bit about the nodes in our test lab, comprising of a large number of nodes, each with the following configuration:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:56
msgid "2 x http://ark.intel.com/Product.aspx?id=37103[Intel Xeon E5530] 2.40 GHz quad core, hyperthreaded processors (= 16 hardware threads per node)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:57
msgid "12GB memory per node, although the JVM heaps are limited at 2GB"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:58
msgid "http://www.redhat.com/rhel/[RHEL] 5.4 with Sun 64-bit JDK 1.6.0_18"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:60
msgid "http://en.wikipedia.org/wiki/InfiniBand[InfiniBand] connectivity between nodes"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:62
msgid "And a little bit about the way the benchmark framework was configured:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:64
msgid "Run from 2 to 12 nodes in increments of 2"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:65
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:105
msgid "25 worker threads per node"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:67
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:107
msgid "Writing 1kb of state (randomly generated Strings) each time, with a 20% write percentage"
msgstr ""

#. type: Table
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:70
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:110
#, no-wrap
msgid "+"
msgstr ""

#. type: Table
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:70
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:110
#, no-wrap
msgid "Reads"
msgstr ""

#. type: Table
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:72
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:112
#, no-wrap
msgid "Writes"
msgstr ""

#. type: Table
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:74
#, no-wrap
msgid ""
"Synchronous\n"
"Replication"
msgstr ""

#. type: Table
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:75
#, no-wrap
msgid "http://2.bp.blogspot.com/_ca0W9t-Ryos/S4OzFmZav-I/AAAAAAAAA_A/Q2p5ls3IV9s/s1600-h/repl_sync_GET.png[image:http://2.bp.blogspot.com/_ca0W9t-Ryos/S4OzFmZav-I/AAAAAAAAA_A/Q2p5ls3IV9s/s400/repl_sync_GET.png[image]]"
msgstr ""

#. type: Table
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:77
#, no-wrap
msgid "http://2.bp.blogspot.com/_ca0W9t-Ryos/S4OzJ7jpzQI/AAAAAAAAA_I/yk4-niZmJq0/s1600-h/repl_sync_PUT.png[image:http://2.bp.blogspot.com/_ca0W9t-Ryos/S4OzJ7jpzQI/AAAAAAAAA_I/yk4-niZmJq0/s400/repl_sync_PUT.png[image]]"
msgstr ""

#. type: Table
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:79
#, no-wrap
msgid ""
"Asynchronous\n"
"Replication"
msgstr ""

#. type: Table
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:80
#, no-wrap
msgid "http://3.bp.blogspot.com/_ca0W9t-Ryos/S4Oy8NmtLNI/AAAAAAAAA-w/q6Z5ZJoUhdE/s1600-h/repl_async_GET.png[image:http://3.bp.blogspot.com/_ca0W9t-Ryos/S4Oy8NmtLNI/AAAAAAAAA-w/q6Z5ZJoUhdE/s400/repl_async_GET.png[image]]"
msgstr ""

#. type: Table
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:81
#, no-wrap
msgid "http://2.bp.blogspot.com/_ca0W9t-Ryos/S4OzCHlI2zI/AAAAAAAAA-4/EtASa2q7k-U/s1600-h/repl_async_PUT.png[image:http://2.bp.blogspot.com/_ca0W9t-Ryos/S4OzCHlI2zI/AAAAAAAAA-4/EtASa2q7k-U/s400/repl_async_PUT.png[image]]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:91
msgid "As you can see, Infinispan significantly outperforms JBoss Cache, even in replicated mode. The large gain in read performance, as well as asynchronous write performance, demonstrates the minimally locking data container and new marshalling techniques in Infinispan. But you also notice that with synchronous writes, performance starts to degrade as the cluster size increases. This is a characteristic of replicated caches, where you always have fast reads and all state available on each and every node, at the expense of ultimate scalability."
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:101
msgid "Enter Infinispan's distributed mode. The goal of data distribution is to maintain enough copies of state in the cluster so it can be durable and fault tolerant, but not too many copies to prevent Infinispan from being scalable, with linear scalability being the ultimate prize. In the following runs, we benchmark Infinispan's synchronous, distributed mode, comparing 2 different Infinispan configurations. The framework was configured with:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:104
msgid "Run from 4 to 48 nodes, in increments of 4 (to better demonstrate linear scalability)"
msgstr ""

#. type: Table
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:114
#, no-wrap
msgid ""
"Synchronous\n"
"Distribution"
msgstr ""

#. type: Table
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:115
#, no-wrap
msgid "http://2.bp.blogspot.com/_ca0W9t-Ryos/S4O322x5vEI/AAAAAAAAA_Q/C6V6jM_BxEM/s1600-h/infinispan_GET.png[image:http://2.bp.blogspot.com/_ca0W9t-Ryos/S4O322x5vEI/AAAAAAAAA_Q/C6V6jM_BxEM/s400/infinispan_GET.png[image]]"
msgstr ""

#. type: Table
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:116
#, no-wrap
msgid "http://1.bp.blogspot.com/_ca0W9t-Ryos/S4O36SCiOZI/AAAAAAAAA_Y/hw3TDXsTxrc/s1600-h/infinispan_PUT.png[image:http://1.bp.blogspot.com/_ca0W9t-Ryos/S4O36SCiOZI/AAAAAAAAA_Y/hw3TDXsTxrc/s400/infinispan_PUT.png[image]]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:143
msgid "As you can see, Infinispan scales linearly as the node count increases.  The different configurations tested, _lazy_ stands for enabling lazy unmarshalling, which allows for state to be stored in Infinispan as byte arrays rather than deserialized objects. This has certain advantages for certain access patterns, for example where remote lookups are very common and local lookups are rare."
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:148
msgid "How does Infinispan comparing against $\\{POPULAR_PROPRIETARY_DATAGRID_PRODUCT}?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:154
msgid "Due to licensing restrictions on publishing benchmarks of such products, we are unfortunately not at liberty to make such comparisons public - although we are very pleased with how Infinispan compares against popular commercial offerings, and plan to push the performance envelope even further in 4.1."
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:162
msgid "And just because we cannot publish such results, that does not mean that you cannot run such comparisons yourself. The Cache Benchmark Framework has support for different data grid products, including http://sourceforge.net/apps/trac/cachebenchfwk/wiki/CoherencePluginSetup[Oracle Coherence], and more can be http://sourceforge.net/apps/trac/cachebenchfwk/wiki/WritingCustomPlugins[added easily]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:169
msgid "Aren't statistics just lies? We strongly recommend you running the benchmarks yourself. Not only does this prove things for yourself, but also allows you to benchmark behaviour on your specific hardware infrastructure, using the specific configurations you'd use in real-life, and with your specific access patterns."
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:172
#, no-wrap
msgid "*So where do I get it?*\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:184
msgid "Infinispan is available on the Infinispan http://www.jboss.org/infinispan/downloads[downloads] page. Please use the http://community.jboss.org/en/infinispan?view=discussions[user forums] to communicate with us about the release. A full change log of features in this release is on https://jira.jboss.org/jira/secure/ConfigureReport.jspa?versions=12313464&sections=.1.7.2.4.10.9.8.3.12.11.5&style=none&selectedProjectId=12310799&reportKey=pl.net.mamut:releasenotes&Next=Next[JIRA], and http://community.jboss.org/wiki/Infinispan[documentation] is on our newly re-organised http://community.jboss.org/wiki/Infinispan[wiki]. We have put together several articles, chapters and examples; feel free to suggest new sections for this user guide - topics you may find interesting or bits you feel we've left out or not addressed as fully."
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:188
#, no-wrap
msgid "*What's next?*\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:194
msgid "We're busy hacking away on Infinispan 4.1 features. Expect an announcement soon on this, including an early alpha release for folks to try out. If you're looking for Infinispan's http://community.jboss.org/wiki/infinispanroadmap[roadmap] for the future, look http://community.jboss.org/wiki/infinispanroadmap[here]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:198
msgid "Cheers, and enjoy!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2010-02-23-infinispan-400final-has-landed.adoc:199
msgid "Manik"
msgstr ""
