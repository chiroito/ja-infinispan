# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 23:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:14
#, no-wrap
msgid ""
"layout: blog\n"
"title: Startup performance\n"
"permalink: /blog/:year/:month/:day/startup-performance\n"
"date: '2011-12-22T08:41:00.000-08:00'\n"
"author: msurtani\n"
"tags: [ \"benchmarks\",\n"
"\"cpu\",\n"
"\"memory\",\n"
"\"performance\",\n"
"]\n"
"blogger_id: tag:blogger.com,1999:blog-5717179571414330874.post-8773782847170679031\n"
"blogger_orig_url: https://blog.infinispan.org/2011/12/startup-performance.html\n"
"---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:20
msgid "One of the things I've done recently was to benchmark how quickly Infinispan starts up.  Specifically looking at LOCAL mode (where you don't have the delays of opening sockets and discovery protocols you see in clustered mode), I wrote up a very simple test to start up 2000 caches in a loop, using the same cache manager."
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:25
msgid "This is a pretty valid use case, since when used as a non-clustered 2nd level cache in Hibernate, a separate cache instance is created _per entity type_, and in the past this has become somewhat of a bottleneck."
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:31
msgid "In this test, I compared Infinispan 5.0.1.Final, 5.1.0.CR1 and 5.1.0.CR2.  5.1.0 is significantly quicker, but I used this test (and subsequent profiling) to commit a couple of interesting changes in 5.1.0.CR2, which has improved things even more - both in terms of CPU performance as well as memory footprint."
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:41
msgid "Essentially, 5.1.0.CR1 made use of https://github.com/jbossas/jandex[Jandex] to perform annotation scanning of internal components at build-time, to prevent expensive reflection calls to determine component dependencies and lifecycle at runtime.   5.1.0.CR2 takes this concept a step further - now we don't just cache annotation lookups at build-time, but entire dependency graphs.  And determining and ordering of lifecycle methods are done at build-time too, again making startup times significantly quicker while offering a much tighter memory footprint."
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:46
msgid "Enough talk.  Here is https://github.com/maniksurtani/InfinispanStartupBenchmark[the test used], and here are the performance numbers, as per my laptop, a 2010 MacBook Pro with an i5 CPU."
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:49
msgid "Multiverse:InfinispanStartupBenchmark manik [master]$ ./bench.sh "
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:50
msgid "Starting benchmark ---"
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:53
msgid "  Please standby ... "
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:58
msgid "Using Infinispan 5.0.1.FINAL (JMX enabled? false)     Created 2000 caches in *10.9 seconds* and consumed *172.32 Mb* of memory."
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:63
msgid "Using Infinispan 5.0.1.FINAL (JMX enabled? true)     Created 2000 caches in *56.18 seconds* and consumed *315.21 Mb* of memory."
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:68
msgid "Using Infinispan 5.1.0.CR1 (JMX enabled? false)     Created 2000 caches in *7.13 seconds* and consumed *157.5 Mb* of memory."
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:73
msgid "Using Infinispan 5.1.0.CR1 (JMX enabled? true)     Created 2000 caches in *34.9 seconds* and consumed *243.33 Mb* of memory."
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:78
msgid "Using Infinispan 5.1.0.CR2(JMX enabled? false)     Created 2000 caches in *3.18 seconds* and consumed *142.2 Mb* of memory."
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:83
msgid "Using Infinispan 5.1.0.CR2(JMX enabled? true)     Created 2000 caches in *17.62 seconds* and consumed *176.13 Mb* of memory."
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:87
msgid "A whopping 3.5 times faster, and significantly more memory-efficient especially when enabling JMX reporting.  :-)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2011-12-22-startup-performance.adoc:91
msgid "Enjoy! Manik"
msgstr ""
