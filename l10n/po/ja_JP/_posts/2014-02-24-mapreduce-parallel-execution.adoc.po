# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 23:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2014-02-24-mapreduce-parallel-execution.adoc:1
#, no-wrap, fuzzy
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_posts/2014-02-24-mapreduce-parallel-execution.adoc:10
#, no-wrap, fuzzy
msgid ""
"layout: blog\n"
"title: Map/Reduce parallel execution\n"
"permalink: /blog/:year/:month/:day/mapreduce-parallel-execution\n"
"date: '2014-02-24T07:59:00.000-08:00'\n"
"author: vblagojevic\n"
"tags: []\n"
"blogger_id: tag:blogger.com,1999:blog-5717179571414330874.post-"
"7465380952767713167\n"
"blogger_orig_url: https://blog.infinispan.org/2014/02/mapreduce-parallel-"
"execution.html\n"
"---\n"
msgstr ""
"layout: blog\n"
"title: 並列実行をマップ/リデュース\n"
"permalink: /blog/:year/:month/:day/mapreduce-parallel-execution\n"
"date: '2014-02-24T07:59:00.000-08:00'\n"
"author: vblagojevic\n"
"tags: []\n"
"blogger_id: tag:blogger.com,1999:blog-5717179571414330874.post-"
"7465380952767713167\n"
"blogger_orig_url: https://blog.infinispan.org/2014/02/mapreduce-parallel-"
"execution.html\n"
"---\n"

#. type: Plain text
#: upstream/_posts/2014-02-24-mapreduce-parallel-execution.adoc:21
#, fuzzy
msgid ""
"Ever since Infinispan 5.2 release we implemented fully distributed execution "
"of both map and reduce phases of MapReduceTask. For the map phase, "
"MapReduceTask hashes task input keys, groups them by execution node N these "
"keys are hashed to, and sends map function along input keys to each node N. "
"At node N map function gets invoked for each input key and locally loaded "
"corresponding value. However, map function on node N, until recently, got "
"invoked on a single thread regardless of the number of key/value pairs. If "
"we need to invoke map function on many key/value pairs, things would sooner "
"rather than later grind to a halt."
msgstr ""
"Infinispan 5."
"2のリリース以来、MapReduceTaskのマップフェーズとリデュースフェーズの完全分散実行を実装してきました。マップフェーズでは、MapReduceTaskはタスクの入力キーをハッシュし、それらをハッシュ先の実行ノードNでグループ化し、入力キーに沿ってマップ関数を各ノードNに送信します。しかし，最近までノードNのマップ関数は，キーと値のペアの数に関係なく，1つのスレッドで呼び出されていました．もし、多くのキー/"
"値のペアに対してマップ関数を呼び出す必要があるならば、遅かれ早かれ事態は収束してしまうでしょう。"

#. type: Plain text
#: upstream/_posts/2014-02-24-mapreduce-parallel-execution.adoc:34
#, fuzzy
msgid ""
"Similarly in order to complete reduce phase, MapReduceTask groups "
"intermediate KOut keys by execution node N they are hashed to. After "
"intermediate phase is completed, MapReduceTask sends a reduce command to "
"each node N where KOut keys are hashed. Once reduce command arrives on "
"target execution node, it looks up temporary cache belonging to "
"MapReduceTask and for each KOut key, grabs a list of VOut values, wraps it "
"with an Iterator and invokes reduce on it. However, even reduce function, "
"until recently, got invoked on a single thread, as well. Even though, due to "
"the nature of map/reduce paradigm, reduce entails significantly smaller "
"number of key/value function invocations compared to a map, current single "
"threaded execution model does not help to speed things up."
msgstr ""
"同様に、リデュースフェーズを完了させるために、MapReduceTaskは、中間のKOutキーをハッシュ化された実行ノードNごとにグループ化する。中間フェーズが完了すると、MapReduceTaskは、KOutキーがハッシュされた各ノードNにreduceコマンドを送信する。reduceコマンドがターゲットの実行ノードに到着すると、MapReduceTaskに属する一時キャッシュを検索し、各KOutキーについて、VOut値のリストを取得し、それをIteratorでラップし、その上でreduceを呼び出します。しかし、最近まではreduce関数でさえもシングルスレッドで呼び出されていました。map/"
"reduce のパラダイムの性質上、reduce は map に比べてキー/"
"値関数の呼び出し回数を大幅に減らしていますが、現在のシングルスレッド実行モデルでは高速化の助けにはなっていません。"

#. type: Plain text
#: upstream/_posts/2014-02-24-mapreduce-parallel-execution.adoc:46
#, fuzzy
msgid ""
"Starting with Infinispan community release 7.0.0.Alpha1, map and reduce task "
"phases are executed in parallel. If the eviction is not configured for the "
"cache where key/value pairs involved in the map phase reside, MapReduceTask "
"uses fork/join work-stealing technique for parallel execution of the map and "
"reduce functions. Otherwise, we implement parallel execution using a "
"standard thread executor framework. Reduce phase is always executed using "
"fork/join work-stealing algorithm. Either way, we are hoping that users' "
"large map/reduce tasks will experience a significant execution speedup.  At "
"the moment, we are conducting our own performance tests and will get back to "
"you with the results soon. Stay tuned."
msgstr ""
"Infinispanコミュニティリリース7.0.0.0."
"Alpha1から、マップとリデュースタスクのフェーズが並列に実行されるようになりました。マップフェーズに関与するキー/"
"値のペアが存在するキャッシュに対して退避が設定されていない場合、MapReduceTaskは、マップとリデュース関数の並列実行のためにフォーク/"
"ジョインのワークステーリング技法を使用します。それ以外の場合は、標準的なスレッド実行フレームワークを使用して並列実行を実装します。リデュースフェーズは常にフォーク/"
"ジョインワークステーリングアルゴリズムを使って実行されます。いずれにしても、ユーザーの大規模なMap/"
"Reduceタスクの実行速度が大幅に向上することを期待しています。 "
"現在、我々は独自のパフォーマンステストを実施しており、すぐに結果をご報告します。ご期待ください。"

#. type: Plain text
#: upstream/_posts/2014-02-24-mapreduce-parallel-execution.adoc:48
#, fuzzy
msgid "Cheers, Vladimir"
msgstr "乾杯 ウラジミール"
