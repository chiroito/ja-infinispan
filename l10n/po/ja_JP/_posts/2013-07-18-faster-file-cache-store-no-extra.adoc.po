# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 23:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:1
#, no-wrap
msgid "---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:10
#, no-wrap
msgid ""
"layout: blog\n"
"title: Faster file cache store (no extra dependencies!) in 6.0.0.Alpha1\n"
"permalink: /blog/:year/:month/:day/faster-file-cache-store-no-extra\n"
"date: '2013-07-18T03:15:00.000-07:00'\n"
"author: galder\n"
"tags: [ \"persistence\", \"alpha\", \"performance\" ]\n"
"blogger_id: tag:blogger.com,1999:blog-5717179571414330874.post-5773862411369868337\n"
"blogger_orig_url: https://blog.infinispan.org/2013/07/faster-file-cache-store-no-extra.html\n"
"---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:18
msgid "As http://infinispan.blogspot.ch/2013/07/infinispan-600alpha1-is-out.html[announced yesterday by Adrian], the brand new Infinispan 6.0.0.Alpha1 release contains a new file-based cache store which needs no extra dependencies.  This is essentially a replacement of the existing FileCacheStore which didn't perform as expected, and caused major issues due to the number of files it created."
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:27
msgid "The new cache store, contributed by a https://github.com/kblees[Karsten Blees] (who also contributed an improved asynchronous cache store), is called https://github.com/infinispan/infinispan/blob/master/core/src/main/java/org/infinispan/loaders/file/SingleFileCacheStore.java[SingleFileCacheStore] and it keeps all data in a single file. The way it looks up data is by keeping an in-memory index of keys and the positions of their values in this file. This design outperforms the existing FileCacheStore and even LevelDB based JNI cache store."
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:34
msgid "The classic case for a file based cache store is when you want to have a cache with a cache store available locally which stores data that has overflowed from memory, having exceeded size and/or time restrictions.  We ran some performance tests to verify how fast different cache store implementations could deal with reading and writing overflowed data, and these are the results we got (in Ks):"
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:37
msgid "FileCacheStore: 0.75k reads/s, 0.285k writes/s"
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:38
msgid "LevelDB-JNI impl: 46k reads/s, 15.2k writes/s"
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:39
msgid "SingleFileCacheStore: 458k reads/s, 137k writes/s"
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:46
msgid "The difference is quite astonishing but as already hinted, this performance increase comes at a cost. Having to maintain an index of keys and positions in the file in memory has a cost in terms of extra memory required, and potential impact on GC. That's why the SingleFileCacheStore is not recommended for use cases where the keys are too big."
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:60
msgid "In order to help tame this memory consumption issues, the http://docs.jboss.org/infinispan/6.0/apidocs/org/infinispan/configuration/cache/SingleFileCacheStoreConfigurationBuilder.html#maxEntries(int)[size of the cache store can be optionally limited, providing a maximum number of entries to store in it]. However, setting this parameter will only work in use cases where Infinispan is used as a cache. When used as a cache, data not present in Infinispan can be recomputed or re-retrieved from the authoritative data store and stored in Infinispan cache. The reason for this limitation is because once the maximum number of entries is reached, older data in the cache store is removed, so if Infinispan was used as an authoritative data store, it would lead to data loss which is not good."
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:70
msgid "Existing FileCacheStore users might wonder: what is it gonna happen to the existing FileCacheStore? We're not 100% sure yet what we're going to do with it, but we're looking into some ways to migrate data from the FileCacheStore to the SingleFileCacheStore.  https://issues.jboss.org/browse/ISPN-3318[Some interesting ideas] have already been submitted which we'll investigate in next Infinispan 6.0 pre-releases."
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:77
msgid "So, if you're a FileCacheStore user, give the new SingleFileCacheStore a go and let us know how it goes! Switching from one to the other is https://github.com/infinispan/infinispan/blob/master/core/src/test/java/org/infinispan/loaders/file/SingleFileCacheStoreFunctionalTest.java#L58[easy] :)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:81
msgid "Cheers,"
msgstr ""

#. type: Plain text
#: upstream/_posts/2013-07-18-faster-file-cache-store-no-extra.adoc:82
msgid "Galder"
msgstr ""
