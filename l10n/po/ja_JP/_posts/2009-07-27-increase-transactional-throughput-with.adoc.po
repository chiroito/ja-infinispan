# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 23:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:1
#, fuzzy, no-wrap
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:11
#, fuzzy, no-wrap
msgid ""
"layout: blog\n"
"title: Increase transactional throughput with deadlock detection\n"
"permalink: /blog/:year/:month/:day/increase-transactional-throughput-with\n"
"date: '2009-07-27T05:36:00.000-07:00'\n"
"author: mmarkus\n"
"tags: [ \"transactions\", \"benchmarks\", \"deadlock detection\", \"concurrency\" ]\n"
"thumbnail: http://1.bp.blogspot.com/_ISQfVF8ALAQ/Sm2hy99CLHI/AAAAAAAABp4/VNnd1p70YW8/s72-c/DLD_local.JPG\n"
"blogger_id: tag:blogger.com,1999:blog-5717179571414330874.post-2082739167162906527\n"
"blogger_orig_url: https://blog.infinispan.org/2009/07/increase-transactional-throughput-with.html\n"
"---\n"
msgstr ""
"layout: blog\n"
"title: デッドロック検出でトランザクションのスループットを向上\n"
"permalink: /blog/:year/:month/:day/increase-transactional-throughput-with\n"
"date: '2009-07-27T05:36:00.000-07:00'\n"
"author: mmarkus\n"
"tags: [ \"transactions\", \"benchmarks\", \"deadlock detection\", \"concurrency\" ]\n"
"thumbnail: http://1.bp.blogspot.com/_ISQfVF8ALAQ/Sm2hy99CLHI/AAAAAAAABp4/VNnd1p70YW8/s72-c/DLD_local.JPG\n"
"blogger_id: tag:blogger.com,1999:blog-5717179571414330874.post-2082739167162906527\n"
"blogger_orig_url: https://blog.infinispan.org/2009/07/increase-transactional-throughput-with.html\n"
"---\n"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:16
#, fuzzy
msgid "Deadlock detection is a new feature in Infinispan. It is about increasing the number of transactions that can be concurrently processed. Let's start with the problem first (the deadlock) then discuss some design details and performance."
msgstr "デッドロック検出は、Infinispanの新機能です。これは、同時に処理できるトランザクションの数を増やすためのものです。最初に問題（デッドロック）から始めて、設計の詳細とパフォーマンスについて説明します。"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:18
#, fuzzy
msgid "So, the by-the-book deadlock example is the following:"
msgstr "そこで、杓子定規なデッドロックの例としては"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:21
#, fuzzy
msgid "Transaction one (T1) performs following operation sequence: (write key_1,write key_2)"
msgstr "トランザクション１（Ｔ１）は、以下の操作シーケンスを実行する。(write key_1,write key_2)"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:24
#, fuzzy
msgid "Transaction two (T2) performs following sequence: (write key_2, write key_1)."
msgstr "トランザクション２（Ｔ２）は、以下のシーケンスを実行します。(write key_2, write key_1)。"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:33
#, fuzzy
msgid "Now, if the T1 and T2 happen at the same time and both have executed first operation, then they will wait for each other virtually forever to release owned locks on keys. In the real world, the waiting period is defined by a lock acquisition timeout (LAT) - which defaults to 10 seconds - that allows the system to overcome such scenarios and respond to the user one way (successful) or the other(failure): so after a period of LAT one (or both) transaction will rollback, allowing the other to continue working."
msgstr "さて、Ｔ１とＴ２が同時に発生し、両方が最初の操作を実行した場合、鍵上の所有するロックを解放するために、実質的に永遠にお互いを待つことになる。現実の世界では、待ち時間はロック獲得タイムアウト(LAT)によって定義されており、デフォルトでは10秒となっています。"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:42
#, fuzzy
msgid "Deadlocks are bad for both system's throughput and user experience.  System throughput is affected because during the deadlock period (which might extend up to LAT) no other thread will be able to update neither key_1 nor key_2. Even worse, access to any other keys that were modified by T1 or T2 will be similarly restricted. User experience is altered by the fact that the call(s) will freeze for the entire deadlock period, and also there's a chance that both T1 and T2 will rollback by timing out."
msgstr "デッドロックはシステムのスループットとユーザーエクスペリエンスの両方に悪影響を及ぼします。システムのスループットは影響を受けます。デッドロック期間中 (LAT まで続く可能性があります) は、他のスレッドは key_1 も key_2 も更新できなくなるからです。さらに悪いことに、T1 や T2 によって変更された他の鍵へのアクセスも同様に制限されます。デッドロック期間中は呼び出しがフリーズし、T1 と T2 がタイミングアウトしてロールバックする可能性もあります。"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:59
#, fuzzy
msgid "As a side note, in the previous example, if the code running the transactions would(and can) enforce any sort of ordering on the keys accessed within the transaction, then the deadlock would be avoided.  E.g. if the application code would order the operation based on the lexicographic ordering of keys, both T1 and T2 would execute the following sequence: (write key_1,write key_2), and so no deadlock would result. This is a best practice and should be followed whenever possible.  Enough with the theory! The way Infinispan performs deadlock detection is based on an algorithm designed by http://www.jboss.org/community/people/jason.greene%40jboss.com[Jason Greene] and http://www.jboss.org/community/people/manik.surtani%40jboss.com[Manik Surtani], which is detailed http://www.jboss.org/index.html?module=bb&op=viewtopic&p=4244838#4244838[here].  The basic idea is to split the LAT in smaller cycles, as it follows:"
msgstr "余談だが、先ほどの例では、トランザクションを実行するコードがトランザクション内でアクセスされた鍵に何らかの順序付けを強制する場合(そしてそれが可能な場合)、デッドロックは回避されるだろう。例えば、アプリケーションコードがキーの辞書順に基づいて操作を行う場合、T1とT2の両方が以下のシーケンスを実行します。(write key_1,write key_2)となり、デッドロックは発生しません。これはベストプラクティスであり、可能な限り従うべきです。理論の話はもういいです。Infinispan がデッドロックを検出する方法は、 link:http://www.jboss.org/community/people/jason.greene%40jboss.com[Jason Greene] と link:http://www.jboss.org/community/people/manik.surtani%40jboss.com[Manik Surtani] が設計したアルゴリズム link:http://www.jboss.org/index.html?module=bb&op=viewtopic&p=4244838#4244838[に] 基づいています。基本的な考え方は、以下のようにLATをより小さなサイクルに分割することです。"

#. type: delimited block -
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:68
#, no-wrap
msgid ""
"lock(int lockAcquisitionTimeout) {\n"
"while (currentTime < startTime + timeout) {\n"
" if (acquire(smallTimeout)) break;\n"
" testForDeadlock(globalTransaction, key);\n"
"}\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:73
#, fuzzy
msgid "What testForDeadlock(globalTransaction, key) does is check weather there is another transaction that satisfies both conditions:"
msgstr "testForDeadlock(globalTransaction, key)が行うのは、両方の条件を満たす別のトランザクションが存在するかどうかをチェックすることです。"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:75
#, fuzzy
msgid "holds a lock on key and"
msgstr "鍵を握って"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:77
#, fuzzy
msgid "intends to lock on a key that is currently called by this transaction."
msgstr "は、このトランザクションによって現在呼び出されているキーをロックすることを意図しています。"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:85
#, fuzzy
msgid "If such a transaction is found then this is a deadlock, and one of the running transactions will be interrupted: the decision of which transaction will interrupt is based on coin toss, a random number that is associated with each transaction. This will ensure that only one transaction will rollback, and the decision is deterministic: nodes and transactions do not need to communicate with each other to determine the outcome."
msgstr "そのようなトランザクションが見つかった場合、これはデッドロックであり、実行中のトランザクションの1つが中断されます: どのトランザクションが中断されるかの決定は、各トランザクションに関連付けられた乱数であるコイントスに基づいています。これにより、1つのトランザクションだけがロールバックすることが保証され、決定は決定論的になります: ノードとトランザクションは結果を決定するためにお互いに通信する必要はありません。"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:89
#, fuzzy
msgid "Deadlock detection in Infinispan works in two flavors: determining deadlocks on transactions that spread over several caches and deadlock detection in transactions running on a single(local) cache."
msgstr "Infinispan のデッドロック検出は、複数のキャッシュに分散しているトランザクションのデッドロックの検出と、単一の(ローカル)キャッシュ上で実行されているトランザクションのデッドロックの検出の2つの機能を持っています。"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:95
#, fuzzy
msgid "Let's see some performance figures as well. A class for benchmarking performance of deadlock detection functionality was created and can be seen http://viewvc.jboss.org/cgi-bin/viewvc.cgi/infinispan/trunk/core/src/test/java/org/infinispan/profiling/DeadlockDetectionPerformanceTest.java?view=markup[here].  Test description (from javadoc):"
msgstr "性能の数値も見てみましょう。デッドロック検出機能の性能をベンチマークするためのクラスを作成しました。テストの説明（javadocより）。"

#. type: delimited block _
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:111
#, fuzzy
msgid "We use a fixed size pool of keys (KEY_POOL_SIZE) on which each transaction operates. A number of threads (THREAD_COUNT) repeatedly starts transactions and tries to acquire locks on a random subset of this pool, by executing put operations on each key. If all locks were successfully acquired then the tx tries to commit: only if it succeeds this tx is counted as successful. The number of elements in this subset is the transaction size (TX_SIZE). The greater transaction size is, the higher chance for deadlock situation to occur. On each thread these transactions are being repeatedly executed (each time on a different, random key set) for a given time interval (BENCHMARK_DURATION). At the end, the number of successful transactions from each thread is cumulated, and this defines throughput (successful tx) per time unit (by default one minute)."
msgstr "各トランザクションが動作する鍵の固定サイズのプール (KEY_POOL_SIZE) を使用します。いくつかのスレッド (THREAD_COUNT) が繰り返しトランザクションを開始し、各キーに対して put 操作を実行することで、このプールのランダムなサブセットのロックを取得しようとします。すべてのロックが正常に取得された場合、その tx はコミットを試みます: 成功した場合のみ、この tx は成功とカウントされます。このサブセットの要素数は、トランザクションサイズ(TX_SIZE)です。トランザクションサイズが大きいほど、デッドロックが発生する可能性が高くなります。各スレッドでは、これらのトランザクションが所定の時間間隔(BENCHMARK_DURATION)で繰り返し実行される(毎回異なるランダムなキーセットで)。最後に、各スレッドからの成功したトランザクションの数が累積され、これが時間単位(デフォルトでは1分)あたりのスループット(成功したtx)を定義します。"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:120
#, fuzzy
msgid "Disclaimer: The following figures are for a scenario especially designed to force very high contention. This is not typical, and you shouldn't expect to see this level of increase in performance for applications with lower contention (which most likely is the case). Please feel free tune the above benchmark class to fit the contention level of your application; sharing your experience would be very useful!"
msgstr "免責事項: 以下の数値は、特に非常に高いコンテンションを強制的に発生させるように設計されたシナリオのためのものです。これは典型的なものではなく、コンテンションが低いアプリケーションでこのレベルのパフォーマンスの向上を期待すべきではありません（ほとんどの場合そうです）。あなたのアプリケーションのコンテンションレベルに合わせて、上記のベンチマーククラスを自由に調整してください。"

#. type: Plain text
#: upstream/_posts/2009-07-27-increase-transactional-throughput-with.adoc:134
#, fuzzy
msgid "Following diagram shows the performance degradation resulting from running the deadlock detection code by itslef in a scenario where no contention/deadlocks are present.  http://1.bp.blogspot.com/_ISQfVF8ALAQ/Sm2hy99CLHI/AAAAAAAABp4/VNnd1p70YW8/s1600-h/DLD_local.JPG[image:http://1.bp.blogspot.com/_ISQfVF8ALAQ/Sm2hy99CLHI/AAAAAAAABp4/VNnd1p70YW8/s400/DLD_local.JPG[image]]http://2.bp.blogspot.com/_ISQfVF8ALAQ/Sm2h_re8qKI/AAAAAAAABqA/bsNgEyCkcYw/s1600-h/DLD_replicated.JPG[image:http://2.bp.blogspot.com/_ISQfVF8ALAQ/Sm2h_re8qKI/AAAAAAAABqA/bsNgEyCkcYw/s400/DLD_replicated.JPG[image]]http://2.bp.blogspot.com/_ISQfVF8ALAQ/Sm2iMq08ZjI/AAAAAAAABqI/Fn049-27Bts/s1600-h/DLD_enabling_overhead.JPG[image:http://2.bp.blogspot.com/_ISQfVF8ALAQ/Sm2iMq08ZjI/AAAAAAAABqI/Fn049-27Bts/s400/DLD_enabling_overhead.JPG[image]] Some clues on when to enable deadlock detection. A high number of transaction rolling back due to org.infinispan.util.concurrent.TimeoutException is an indicator that this functionality might help. TimeoutException might be caused by other causes as well, but deadlocks will always result in this exception being thrown. Generally, when you have a high contention on a set of keys, deadlock detection may help. But the best way is not to guess the performance improvement but to benchmark and monitor it: you can have access to statistics (e.g. number of deadlocks detected) through JMX, as it is exposed via the DeadlockDetectingLockManager MBean."
msgstr "以下の図は、競合/デッドロックが存在しない場合に、 itslefによるデッドロック検出コードを実行した場合の性能低下を示しています。 link:http://1.bp.blogspot.com/_ISQfVF8ALAQ/Sm2hy99CLHI/AAAAAAAABp4/VNnd1p70YW8/s1600-h/DLD_local.JPG[] http://2.bp.blogspot.com/_ISQfVF8ALAQ/Sm2h_re8qKI/AAAAAAAABqA/bsNgEyCkcYw/s1600-h/DLD_replicated.JPG[image:http://2.bp.blogspot.com/_ISQfVF8ALAQ/Sm2h_re8qKI/AAAAAAAABqA/bsNgEyCkcYw/s400/DLD_replicated.JPG[alt=\"image\"]] link:http://2.bp.blogspot.com/_ISQfVF8ALAQ/Sm2iMq08ZjI/AAAAAAAABqI/Fn049-27Bts/s1600-h/DLD_enabling_overhead.JPG[] デッドロック検出を有効にするタイミングについて、いくつかのヒントがあります。org.infinispan.util.concurrent.TimeoutExceptionによるトランザクションのロールバックが多いのは、この機能が有効になる可能性があることを示しています。TimeoutExceptionは他の原因でも発生する可能性がありますが、デッドロックが発生すると必ずこの例外がスローされます。一般的に、鍵のセットで競合が多い場合は、デッドロックの検出が役立つかもしれません。JMX を通じて統計情報 (検出されたデッドロックの数など) にアクセスすることができます (DeadlockDetectingLockManager MBean で公開されています)。"
